public boolean isBipartite(int[][] graph) {
    int n = graph.length;
    int[] colors = new int[n]; // To store colors (0 - unvisited, 1 - group A, 2 - group B)

    for (int i = 0; i < n; i++) {
        if (colors[i] == 0 && !dfs(graph, colors, 1, i)) {
            return false;
        }
    }

    return true;
}

private boolean dfs(int[][] graph, int[] colors, int color, int node) {
    if (colors[node] != 0) {
        return colors[node] == color;
    }

    colors[node] = color;
    for (int neighbor : graph[node]) {
        if (!dfs(graph, colors, 3 - color, neighbor)) {
            return false;
        }
    }

    return true;
}
