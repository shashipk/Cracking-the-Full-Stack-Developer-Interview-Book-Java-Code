class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;

    // Constructor
    public Node(int val) {
        this.val = val;
        this.prev = null;
        this.next = null;
        this.child = null;
    }
}

public class FlattenDoublyLinkedList {

    public static Node flatten(Node head) {
        if (head == null) return null;
        Node pseudoHead = new Node(0);
        pseudoHead.next = head;
        flattenDFS(pseudoHead, head);
        pseudoHead.next.prev = null;
        return pseudoHead.next;
    }

    private static Node flattenDFS(Node prev, Node curr) {
        if (curr == null) return prev;
        curr.prev = prev;
        prev.next = curr;

        Node tempNext = curr.next;
        Node tail = flattenDFS(curr, curr.child);
        curr.child = null;
        return flattenDFS(tail, tempNext);
    }

    public static void main(String[] args) {
        // Example: Create a doubly linked list with child nodes and flatten it.
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        Node node6 = new Node(6);

        node1.next = node2;
        node2.prev = node1;
        node2.next = node3;
        node3.prev = node2;
        node3.next = node4;
        node4.prev = node3;
        node4.child = node5;
        node5.next = node6;
        node6.prev = node5;

        Node flattened = flatten(node1);

        // Print the flattened list
        Node current = flattened;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
    }
}
