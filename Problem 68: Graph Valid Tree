
public boolean validTree(int n, int[][] edges) {
    if (edges.length != n - 1) {
        return false; // Invalid number of edges
    }

    // Create an adjacency list
    Map<Integer, List<Integer>> adjacencyList = new HashMap<>();
    for (int[] edge : edges) {
        int u = edge[0];
        int v = edge[1];
        adjacencyList.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
        adjacencyList.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
    }

    // Perform DFS traversal
    Set<Integer> visited = new HashSet<>();
    Stack<Integer> stack = new Stack<>();
    stack.push(0); // Start from an arbitrary node (e.g., node 0)

    while (!stack.isEmpty()) {
        int node = stack.pop();
        if (visited.contains(node)) {
            return false; // Cycle detected
        }
        visited.add(node);
        for (int neighbor : adjacencyList.getOrDefault(node, Collections.emptyList())) {
            if (!visited.contains(neighbor)) {
                stack.push(neighbor);
            }
        }
    }

    // Check for connectivity
    return visited.size() == n;
}
