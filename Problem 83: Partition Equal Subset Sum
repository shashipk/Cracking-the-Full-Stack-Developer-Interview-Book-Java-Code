public boolean canPartition(int[] nums) {
    int n = nums.length;
    int sum = 0;
    
    for (int num : nums) {
        sum += num;
    }
    
    if (sum % 2 != 0) {
        // If the total sum is odd, we cannot partition into two equal subsets.
        return false;
    }
    
    sum /= 2; // We want to find if there is a subset with sum equal to half of the total sum.
    
    boolean[][] dp = new boolean[n + 1][sum + 1];
    
    // Initialization
    for (int i = 0; i <= n; i++) {
        dp[i][0] = true;
    }
    
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            if (nums[i - 1] <= j) {
                dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i - 1]];
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    
    return dp[n][sum];
}
