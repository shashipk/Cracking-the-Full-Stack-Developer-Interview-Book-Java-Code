public int numIslands(char[][] grid) {
    if (grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0)
        return 0;

    int rows = grid.length;
    int cols = grid[0].length;
    int count = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (grid[i][j] == '1') {
                count++;
                dfs(grid, i, j);
            }
        }
    }

    return count;
}

private void dfs(char[][] grid, int row, int col) {
    int rows = grid.length;
    int cols = grid[0].length;

    if (row < 0 || row >= rows || col < 0 || col >= cols || grid[row][col] == '0')
        return;

    grid[row][col] = '0'; // Mark the current cell as visited

    // Explore adjacent cells
    dfs(grid, row + 1, col); // Down
    dfs(grid, row - 1, col); // Up
    dfs(grid, row, col + 1); // Right
    dfs(grid, row, col - 1); // Left
}
