
public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
    // Construct the adjacency list
    List<Integer>[] graph = new ArrayList[n];
    for (int i = 0; i < n; i++) {
        graph[i] = new ArrayList<>();
    }
    for (List<Integer> conn : connections) {
        int u = conn.get(0);
        int v = conn.get(1);
        graph[u].add(v);
        graph[v].add(u);
    }

    List<List<Integer>> result = new ArrayList<>();
    int[] disc = new int[n];
    int[] low = new int[n];
    Arrays.fill(disc, -1);
    int time = 0;

    // Perform DFS
    dfs(0, -1, graph, disc, low, time, result);

    return result;
}

private void dfs(int u, int parent, List<Integer>[] graph, int[] disc, int[] low, int time, List<List<Integer>> result) {
    disc[u] = time;
    low[u] = time;
    time++;

    for (int v : graph[u]) {
        if (v == parent) {
            continue; // Ignore the edge to the parent
        }

        if (disc[v] == -1) {
            dfs(v, u, graph, disc, low, time, result);

            low[u] = Math.min(low[u], low[v]);

            if (disc[u] < low[v]) {
                result.add(Arrays.asList(u, v));
            }
        } else {
            low[u] = Math.min(low[u], disc[v]);
        }
    }
}
